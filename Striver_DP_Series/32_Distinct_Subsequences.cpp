/*
Problem Statement
Statement:

We are given two strings, ‘TEXT' and ‘S’. We have to calculate the no. of subsequences of ‘TEXT’, which are equal to ‘S’. Since the answer can be very large print it modulo (10^9)+7.
A Subsequence of a string is the string that is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.
For Example:
‘TEXT’ = “brootgroot” and ‘S’ = “brt”
Following subsequences formed by characters at given indices (1-based) of TEXT are counted
1 2 5
1 2 10
1 7 10
So, our output will be:
3
*/

#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
    int numDistinct(string s, string t)
    {
        int n = s.length();
        int m = t.length();
        vector<vector<double>> dp(n + 1, vector<double>(m + 1, 0));
        //     return solve(lt,ls,t,s,dp);

        //  why we put 1 here, because 
        // for every j=0 means, we have got our string as a subsequence
        // so just put 1 for every j=0.
        for (int i = 0; i <= n; i++)
        {
            dp[i][0] = 1;
        }
        // Here for every i=0 put 0 becasue till now haven't find the string 
        //     for(int j=1;j<=m;j++)
        //     {
        //         dp[0][j]=0;
        //     }
        for (int i = 1; i <= n; i++)
        {
            for (int j = 1; j <= m; j++)
            {
                if (s[i - 1] == t[j - 1])
                {
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
                }
                else
                {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        return dp[n][m];
    }
};

int main()
{
    string s, t;
    cin >> s >> t;
    Solution obj;
    int ans = obj.numDistinct(s, t);
    cout << ans << endl;
    return 0;
}