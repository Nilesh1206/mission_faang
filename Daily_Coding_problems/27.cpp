/*
This question is asked by Google. You are given two strings, s and t which only 
consist of lowercase letters. t is generated by shuffling the letters in s as well as
 potentially adding an additional random character. Return the letter that was randomly 
 added to t if it exists, otherwise, return ’  ‘.
Note: You may assume that at most one additional character can be added to t.

Ex: Given the following strings...

s = "foobar", t = "barfoot", return 't'
s = "ide", t = "idea", return 'a'
s = "coding", t "ingcod", return ''
*/

#include<bits/stdc++.h>
using namespace std;

void solve(string s,string t)
{
    int n=s.length();
    vector<bool>visited(n,false);
    for(int i=0;i<t.length();i++)
    {
        char ch=t[i];
        bool ok=false;
        for(int j=0;j<n;j++)
        {
            if(s[j]==ch && !visited[j])
            {
                ok=true;
                visited[j]=true;
                break;
            }
        }
        if(!ok)
        {
            cout<<ch<<endl;
            return;
        }
    }
    cout<<" "<<endl;
    return;
}
// Time Complexity:O(|t|*|s|)
// Space Complexity:O(|s|)




void GetChar(string s,string t)
{
    unordered_map<char,int>mp;
    for(int i=0;i<s.length();i++)
    {
        mp[s[i]]++;
    }
    for(int i=0;i<t.length();i++)
    {
        mp[t[i]]++;
    }
    unordered_map<char,int>::iterator it;
    for(it=mp.begin();it!=mp.end();++it)
    {
        if(it->second%2!=0)
        {
            cout<<it->first<<endl;
            return;
        }
    }
    cout<<" ";
    return;
}
// Time Complexity:O(max(|s|,|t|))
// Space Complexity:O(26);


int main()
{
    string s,t;
    cin>>s>>t;
    solve(s,t);
    GetChar(s,t);
    return 0;
}